/*==================== RESET STYLES ====================*/
@import 'import/reset.scss';
/*==================== RESET STYLES ====================*/

/*==================== FONTS ====================*/
@import 'fonts.scss';

// @import url(''); // &subset=cyrillic-ext

// @font-face {
//   font-family: 'Train One';
//   src: url('../../fonts') format('woff2'), url('../../fonts') format('woff');
//   font-weight: 400;
//   font-style: normal;
//   font-display: swap;
// }
/*==================== FONTS ====================*/

/*==================== VARIABLES ====================*/
$maxWidthLayout: 1440;
$maxWidthContainer: 1200;
$montFont: 'Montserrat', sans-serif;
$whiteColor: #fff;
$blackColor: #000;
/*==================== VARIABLES ====================*/

/*==================== MIXINS ====================*/
// responsive value
@mixin respValue($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  @if $type==1 {
    //Только если меньше контейнера
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  } @else if $type==2 {
    //Только если больше контейнера
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthLayout - 320}));
    }
  } @else {
    //Всегда
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthLayout - 320}));
  }
}
// snippet (rv)
// responsive value
/*==================== MIXINS ====================*/

/*==================== BASIC PARAMETERS ====================*/
html {
  scroll-behavior: smooth;
}

body {
  font-family: $montFont;
  font-weight: 400;
  font-size: 14px;
  line-height: 1.2;
  background: $whiteColor;
  color: $blackColor;

  @media (max-width: 767.98px) {
    &.lock {
      overflow: hidden;
    }
  }
}

.wrapper {
  display: flex;
  flex-direction: column;
  min-height: 100%;
  overflow: hidden;

  // min-height: 100%;
  // display: grid;

  // grid-template: minmax(90px, auto) 1fr minmax(70px, auto);
  // grid-template-areas:
  //   'header'
  //   'main'
  //   'footer';

  // grid-template:
  //   [start] 'header' minmax(90px, auto) [row2]
  //   [row2] 'main' 1fr [row3]
  //   [row3] 'footer' minmax(70px, auto) [row-end] / 1fr;
}

.main {
  flex: 1 1 auto;

  .section-class,
  .section-class {
    &:not(:last-child) {
      @include respValue('margin-bottom', 60, 40, 1);
    }
  }

  &:not(:last-child) {
    @include respValue('margin-bottom', 60, 40, 1);
  }
}
/*==================== BASIC PARAMETERS ====================*/

/*==================== REPEAT BLOCK ====================*/
//! Container
[class*='__container'] {
  width: 100%;
  max-width: $maxWidthContainer + px;
  padding: 0 15px;
  margin: 0 auto;
}

// .container {
//   width: 100%;
//   max-width: $maxWidthContainer + px;
//   padding: 0 15px;
//   margin: 0 auto;
// }

//! Responsive Image
.ibg {
  position: relative;

  img {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    object-fit: cover;
  }
}

//! Title
.title-block-l {
  font-weight: 600;
  @include respValue('font-size', 40, 30, 1);
  letter-spacing: 0.2px;
  text-transform: uppercase;

  &:not(:last-child) {
    @include respValue(margin-bottom, 25, 20, 1);
  }
}

.title-block-m {
  font-weight: 600;
  @include respValue('font-size', 24, 20, 1);
  letter-spacing: 0.2px;
  text-transform: uppercase;

  &:not(:last-child) {
    @include respValue(margin-bottom, 20, 15, 1);
  }
}

//! Button (highlight)
.button {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  max-width: 150px;
  width: 100%;
  padding: 7px;
  min-height: 50px;
  font-weight: 500;
  font-size: 18px;
  letter-spacing: 0.8px;
  text-transform: capitalize;
  color: $whiteColor;
  border-radius: 4px;
  overflow: hidden;
  transition: all 0.2s linear;
  cursor: pointer;

  &::before {
    content: '';
    position: absolute;
    width: 2em;
    height: 100%;
    top: 0;
    left: 0;
    background: rgba(238, 238, 238, 0.7);
    border-radius: 4px;
    overflow: hidden;
    transform: translateX(-4em) skewX(-45deg);
    transition: all 0.2s linear;
  }

  &:hover {
    &::before {
      animation: highlight 0.4s linear;
    }
  }
}

@keyframes highlight {
  0% {
    transform: translateX(-4em) skewX(-45deg);
  }
  100% {
    transform: translateX(10em) skewX(-45deg);
  }
}

//! Button (waves)
.wave-btn {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  // width: 280px;
  // height: 60px;
  width: 150px;
  height: 50px;
  border-radius: 0 0 10px 10px;
  overflow: hidden;
  transition: all 0.5s ease;

  &__text {
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 8px;
    color: $whiteColor;
    position: relative;
    z-index: 5;
  }

  &__waves {
    position: absolute;
    // width: 280px;
    // height: 280px;
    width: 150px;
    height: 150px;
    top: 0;
    left: 0;
    // background: #4973ff;
    background: #4fbb65;
    // box-shadow: inset 0 0 50px rgba(0, 0, 0, 0.5);
    box-shadow: inset 0 0 70px rgba(0, 0, 0, 0.5);
    transition: all 0.5s linear;

    &::before,
    &::after {
      content: '';
      position: absolute;
      width: 250%;
      height: 250%;
      top: 0;
      left: 50%;
      // transform: translate(-50%, -96%);
      transform: translate(-47%, -93%);
    }

    &::before {
      // background: #000;
      // background: $terraColor;
      border-radius: 48%;
      animation: waves 5s infinite linear;
    }

    &::after {
      // background: rgba(0, 0, 0, 0.5);
      background: rgba(121, 79, 69, 0.5);
      border-radius: 44%;
      animation: waves 10s infinite linear;
    }
  }

  &:hover {
    border-radius: 10px;
    box-shadow: 0 0 30px rgba(79, 187, 101, 0.6);
    transition: all 0.5s ease 0.2s;

    .wave-btn__waves {
      top: -50px;
    }
  }
}

@keyframes waves {
  0% {
    // transform: translate(-50%, -96%) rotate(0deg);
    transform: translate(-47%, -93%) rotate(0deg);
  }
  100% {
    // transform: translate(-50%, -96%) rotate(360deg);
    transform: translate(-47%, -93%) rotate(360deg);
  }
}
/*==================== REPEAT BLOCK ====================*/
